import QuickChart from 'quickchart-js';


export function generateChart(activatedData: number[], deactivatedData: number[], nonAuthenticatedData: number[], NUM_ROUNDS: number) {
    const chart = new QuickChart();

    chart.setConfig({
        type: 'line',
        data: {
            labels: Array.from({ length: NUM_ROUNDS }, (_, i) => `Round ${i + 1}`), // Labels pour chaque round
            datasets: [
                {
                    label: 'DIDs Activ√©s',
                    data: activatedData,
                    borderColor: 'rgba(0, 255, 0, 1)', // Vert pour activ√©s
                    fill: false,
                    tension: 0.1
                },
                {
                    label: 'DIDs D√©sactiv√©s',
                    data: deactivatedData,
                    borderColor: 'rgba(255, 0, 0, 1)', // Rouge pour d√©sactiv√©s
                    fill: false,
                    tension: 0.1
                },
                {
                    label: 'DIDs Non Authentifi√©s',
                    data: nonAuthenticatedData,
                    borderColor: 'rgba(255, 255, 0, 1)', // Jaune pour non authentifi√©s
                    fill: false,
                    tension: 0.1
                }
            ]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Rounds'
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Temps de R√©ponse (ms)'
                    }
                }
            }
        }
    });

    // G√©n√©rer l'image du graphique
    chart.toFile('Delay_Vs_Class.png').then(() => {
        console.log('üìä Le graphique a √©t√© g√©n√©r√© et enregistr√© sous "computational_delay_chart.png".');
    }).catch((error) => {
        console.error('‚ùå Erreur lors de la g√©n√©ration du graphique:', error);
    });
}
